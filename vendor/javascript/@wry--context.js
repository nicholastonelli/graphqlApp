// @wry/context@0.7.4 downloaded from https://ga.jspm.io/npm:@wry/context@0.7.4/lib/index.js

let t=null;const n={};let e=1;const makeSlotClass=()=>class Slot{constructor(){this.id=["slot",e++,Date.now(),Math.random().toString(36).slice(2)].join(":")}hasValue(){for(let e=t;e;e=e.parent)if(this.id in e.slots){const o=e.slots[this.id];if(o===n)break;e!==t&&(t.slots[this.id]=o);return true}t&&(t.slots[this.id]=n);return false}getValue(){if(this.hasValue())return t.slots[this.id]}withValue(n,e,o,r){const i={__proto__:null,[this.id]:n};const s=t;t={parent:s,slots:i};try{return e.apply(r,o)}finally{t=s}}static bind(n){const e=t;return function(){const o=t;try{t=e;return n.apply(this,arguments)}finally{t=o}}}static noContext(n,e,o){if(!t)return n.apply(o,e);{const r=t;try{t=null;return n.apply(o,e)}finally{t=r}}}};function maybe(t){try{return t()}catch(t){}}const o="@wry/context:Slot";const r=maybe((()=>globalThis))||maybe((()=>global))||Object.create(null);const i=r;const s=i[o]||Array[o]||function(t){try{Object.defineProperty(i,o,{value:t,enumerable:false,writable:false,configurable:true})}finally{return t}}(makeSlotClass());const{bind:l,noContext:c}=s;function setTimeoutWithContext(t,n){return setTimeout(l(t),n)}function asyncFromGen(t){return function(){const n=t.apply(this,arguments);const e=l(n.next);const o=l(n.throw);return new Promise(((t,r)=>{function invoke(e,o){try{var i=e.call(n,o)}catch(t){return r(t)}const s=i.done?t:invokeNext;isPromiseLike(i.value)?i.value.then(s,i.done?r:invokeThrow):s(i.value)}const invokeNext=t=>invoke(e,t);const invokeThrow=t=>invoke(o,t);invokeNext()}))}}function isPromiseLike(t){return t&&"function"===typeof t.then}const u=[];function wrapYieldingFiberMethods(t){if(u.indexOf(t)<0){const wrap=(t,n)=>{const e=t[n];t[n]=function(){return c(e,arguments,this)}};wrap(t,"yield");wrap(t.prototype,"run");wrap(t.prototype,"throwInto");u.push(t)}return t}export{s as Slot,asyncFromGen,l as bind,c as noContext,setTimeoutWithContext as setTimeout,wrapYieldingFiberMethods};

