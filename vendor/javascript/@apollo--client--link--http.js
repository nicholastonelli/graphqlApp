// @apollo/client/link/http@4.0.4 downloaded from https://ga.jspm.io/npm:@apollo/client@4.0.4/link/http/index.js

import{d as t,s as e,f as n,r,p as o}from"../../_/CASUzeJ9.js";export{a as selectHttpOptionsAndBody}from"../../_/CASUzeJ9.js";import{invariant as s}from"@apollo/client/utilities/invariant";import{Observable as i}from"rxjs";import{ApolloLink as l}from"@apollo/client/link";import{filterOperationVariables as c}from"@apollo/client/link/utils";import{isSubscriptionOperation as p,isMutationOperation as u}from"@apollo/client/utilities";import{__DEV__ as f}from"@apollo/client/utilities/environment";import{compact as d}from"@apollo/client/utilities/internal";import{maybe as m}from"@apollo/client/utilities/internal/globals";import{ClientAwarenessLink as h}from"@apollo/client/link/client-awareness";import"@apollo/client/errors";const b=t=>{s(t||typeof fetch!=="undefined",59)};
/**
 * @deprecated
 * This is not used internally any more and will be removed in
 * the next major version of Apollo Client.
 */const g=()=>{if(typeof AbortController==="undefined")return{controller:false,signal:false};const t=new AbortController;const e=t.signal;return{controller:t,signal:e}};const y=(t,e)=>{const n=t.getContext();const r=n.uri;return r||(typeof e==="function"?e(t):e||"/graphql")};function v(t,e){const n=[];const r=(t,e)=>{n.push(`${t}=${encodeURIComponent(e)}`)};"query"in e&&r("query",e.query);e.operationName&&r("operationName",e.operationName);if(e.variables){let t;try{t=JSON.stringify(e.variables)}catch(t){return{parseError:t}}r("variables",t)}if(e.extensions){let t;try{t=JSON.stringify(e.extensions)}catch(t){return{parseError:t}}r("extensions",t)}let o="",s=t;const i=t.indexOf("#");if(i!==-1){o=t.substr(i);s=t.substr(0,i)}const l=s.indexOf("?")===-1?"?":"&";const a=s+l+n.join("&")+o;return{newURI:a}}const x=m((()=>fetch));function E(){}class BaseHttpLink extends l{constructor(s={}){let{uri:l="/graphql",fetch:a,print:h=t,includeExtensions:g,preserveHeaderCase:q,useGETForQueries:w,includeUnusedVariables:L=false,...k}=s;f&&b(a||x);const C={http:d({includeExtensions:g,preserveHeaderCase:q}),options:k.fetchOptions,credentials:k.credentials,headers:k.headers};super((t=>{let s=y(t,l);const f=t.getContext();const d={...f.http};p(t.query)&&(d.accept=["multipart/mixed;boundary=graphql;subscriptionSpec=1.0",...d.accept||[]]);const b={http:d,options:f.fetchOptions,credentials:f.credentials,headers:f.headers};const{options:g,body:q}=e(t,h,n,C,b);q.variables&&!L&&(q.variables=c(q.variables,t.query));let k=new AbortController;let H=()=>{k=void 0};if(g.signal){const t=g.signal;const e=()=>{k?.abort(t.reason)};t.addEventListener("abort",e,{once:true});H=()=>{k?.signal.removeEventListener("abort",H);k=void 0;t.removeEventListener("abort",e);H=E};k.signal.addEventListener("abort",H,{once:true})}g.signal=k.signal;w&&!u(t.query)&&(g.method="GET");return new i((e=>{if(g.method==="GET"){const{newURI:t,parseError:e}=v(s,q);if(e)throw e;s=t}else g.body=JSON.stringify(q);const n=a||m((()=>fetch))||x;const i=e.next.bind(e);n(s,g).then((e=>{t.setContext({response:e});const n=e.headers?.get("content-type");return n!==null&&/^multipart\/mixed/i.test(n)?r(e,i):o(t)(e).then(i)})).then((()=>{H();e.complete()})).catch((t=>{H();e.error(t)}));return()=>{k&&k.abort()}}))}))}}class HttpLink extends l{constructor(t={}){const{left:e,right:n,request:r}=l.from([new h(t),new BaseHttpLink(t)]);super(r);Object.assign(this,{left:e,right:n})}}
/**
 * @deprecated
 * Use `HttpLink` from `@apollo/client/link/http` instead.
 */const q=(t={})=>new HttpLink(t);export{BaseHttpLink,HttpLink,b as checkFetcher,q as createHttpLink,g as createSignalIfSupported,t as defaultPrinter,n as fallbackHttpConfig,o as parseAndCheckHttpResponse,v as rewriteURIForGET,e as selectHttpOptionsAndBodyInternal,y as selectURI};

